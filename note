#import numpy as np

# a rows, b columns, type: <class 'numpy.ndarray'>; 生成a行b列的零array
A = np.zeros((a,b)) 

# 1*N zero-array; 生成N个零元素的array
A = np.zeros(N) 

# a classes, total number is b; 0：（a-1）之间随机选取b个数，可重复，并从小到大排序
gt = np.random.randint(a,size=b) 
gt.sort()

#average, medium, sdv, var; 求评价，中位数，标准差，方差
#gaussian distribtuion; 高斯分布, 生成n个平均数为0，标准差为sigma的数
A = sigma * np.random.randn(n)
np.means(A)
np.median(A)
np.std(A) #有偏标准差，即除以n
np.std(A,ddof = 1) #无偏标准差，即除以（n-1）

#sum; 求和
a = np.sum(A,axis=1) #求行和
a = np.sum(A,axis=0) #求列和

#pow；对list a中的每个元素 乘方x
aa = np.power(a,x)

#diagonalization；对角化
A = np.diag(A)

#combine list; 合并数组
a = [[1,2,3],[4,5,6]]
b = [[1,1,1],[2,2,2]]
c = np.vstack((a,b)) #竖直方向合并
d = np.hstack((a,b)) #水平方向合并
e = a+b #合并，将b的元素添加至a的后方

#矩阵乘法
a@np.transpose(b)

#对list中的每个数进行处理
for i in range(len(a)):
    a[i] = [j+1 for j in a[i]]
print(a)

#或将list转化为数组处理
a = np.array(a)

#import random
#uniform distribution; 均匀分布
x = random.uniform(0,1)

#break 的用法： 只跳出一个loop， 例如，仅j所在loop被跳出
for i in range(5):
    print(i)
    for j in range(10):
        print(j)
        if j > 5:
            break
            
 #关于list和np.array
 list只有len
 array只有shape，size （这个数组中有多少个元素）
 
 #str大小写转化
 s = 'A mUltiCased string'.upper()
 s = 'A mUltiCased string'.lower()

 
 #plot;plt; 作图
 #import matplotlib.pyplot as plt
 #from matplotlib import cm 
 #from matplotlib import axes
 #from mpl_toolkits.mplot3d import Axes3D
 
 #点与x坐标轴相连
 a = range(1,5)
 plt.stem(a)
 plt.show()
 
 #3D作图
 kkk = np.arange(0,len(data))
 ax = plt.subplot(111,projection = '3d')
 plt.axis('equal')
 ax.scatter(x,y,z,c=kkk)
 ax.set_zlabel('3rdDF')  # corrdinate
 ax.set_ylabel('2ndDF')
 ax.set_xlabel('1stDF')
 plt.savefig('name.png')
 plt.show()
 
 
